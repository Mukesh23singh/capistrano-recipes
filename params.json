{"name":"Capistrano Recipes","tagline":"Clone and deploy. Deployment made incredibly simple with capistrano. Recipes for many popular infrastructure gems.","body":"## Capistrano Recipes\r\nOriginally borrowed from [Railscasts Episode 337](http://railscasts.com/episodes/337-capistrano-recipes)\r\n\r\n## Installation\r\n\r\nin your project's root\r\n\r\n```\r\ngit submodule add git://github.com/pferdefleisch/capistrano-recipes config/recipes\r\ncd config/recipes\r\n./install # this copies the deploy-example.rb file to config/deploy.rb\r\ncd ../..\r\ncapify .\r\n```\r\n\r\n### in your deploy.rb\r\n\r\n* add your server information\r\n* remove the recipes you don't want\r\n\r\n## Recipes\r\n\r\nI have marked tasks that occur automatically during deployment when requiring the recipe in `config/deploy.rb` with *[automatic]*\r\n\r\n### asset_pipeline\r\n\r\n__before__\r\n\r\n*[automatic]* precompiles your Rails assets locally\r\n\r\n__after `deploy:update`__\r\n\r\n*[automatic]* rsyncs them to the server after `deploy:update` hook\r\n\r\n`deploy:clean`\r\n\r\n*[automatic]* removes your local `public/assets` folder after deployment\r\n\r\n### backup\r\n\r\n__variables__\r\n\r\n`backup_postgres_socket_path`: `\"/var/run/postgres\"`  \r\n`backup_encryption_password`: prompts for encryption password  \r\n`backup_backup_server_pass`: prompts for backup server password  \r\n`backup_backup_server_host`: prompts for backup server's hostname  \r\n`backup_backup_server_user`: prompts for backu server's username  \r\n`backup_backup_server_path`:  prompts for path to backup to on backup server  \r\n`backup_rsync_push_directories`: which directories to backup with rsync - default: `[\"#{shared_path}/system\"]`  \r\n`backup_archive_daily_folders`: which folders to archive - default: empty array  \r\n`backup_archive_weekly_folders`: which folders to archive weekly - default: `[\"#{shared_path}/config\"]`\r\n\r\n__install__\r\n\r\nInstalls backup gem config files\r\n\r\n__symlink__\r\n\r\n*[automatic]* symlinks backup.yml file from `shared/config/backup.yml` to `current/config/backup.yml`\r\n\r\n### bundler\r\n\r\n*[automatic]* I have had to hack my way around bundler installs on my server before. I am now comfortable using `require \"bundler/capistrano\"` in the deploy.rb file but this is still here for special cases\r\n\r\n### carrierwave\r\n\r\n*[automatic]* This simply symlinks your `shared/uploads` path to `public/uploads` \r\n\r\n### logrotate\r\n\r\nHas a setup task to create a logrotate file for current application. It is pretty hard coded at the moment. The template is in `templates/logrotate.erb`. The current template is pretty robust, I suggest editing the template if you have any specific needs.\r\n\r\n### logs\r\n\r\n__tail__\r\n\r\ntail your `production.log` file. There is not currently a way to tail other log files.o\r\n\r\n__htop__\r\n\r\nIf you have htop installed on your remote server, this will show you the interactive htop screen.\r\n\r\n### monit\r\n\r\nCurrently supports `nginx`, `postgresql` and `unicorn`\r\n\r\n__setup__\r\n\r\nInstalls `monitrc`. You may need to tweak the `set daemon 30` setting, this is how often monit runs its checks.\r\n\r\n### nginx\r\n\r\n__install__\r\n\r\ninstalls nginx from apt nginx/stable repository\r\n\r\n__setup__\r\n\r\nsets up unicorn `sites_enabled` config file or app\r\n\r\n__controls__\r\n\r\n*[automatic]* `start`, `stop`, `restart`\r\n\r\n### nodejs\r\n\r\n__install__\r\n\r\nInstalls nodejs on remote server from `ppa:chris-lea/node.js` apt repo. This makes memory hungry `therubyracer` unnecessary. Plus you can now run unbelievably fast and fun to write nodejs utilities on your server :P\r\n\r\n### passenger\r\n\r\nRestarts passenger after deploy\r\n\r\n### postgresql\r\n\r\n__variables__\r\n\r\n`postgresql_host`: default \"localhost\"  \r\n`postgresql_user`: default the application var  \r\n`postgresql_password`: prompts for postgresql password  \r\n`postgresql_database`: default `\"#{application}_production\"`  \r\n`postgresql_dump_path`: default `\"#{current_path}/tmp\"`  \r\n`postgresql_dump_file`: default `\"#{application}_dump.sql\"`  \r\n`postgresql_local_dump_path`: default `File.expand_path(\"../../../tmp\", __FILE__)`  \r\n`postgresql_pid`: default `\"/var/run/postgresql/9.1-main.pid\"`\r\n\r\n__install__\r\n\r\nInstall postgresql apt package on remote server\r\n\r\n__create_database__\r\n\r\nPrompts for password and creates production database.  \r\nRun before `postgresql:setup` in `deploy:setup` hook.\r\n\r\n__setup__\r\n\r\ncreates database.yml based on `postgresql:create_database` settings.  \r\nRun after `postgresql:create_database` in `deploy:setup` hook.\r\n\r\n__console__\r\n\r\nOpens an interactive postgresql database console connected to remote server\r\n\r\n__local:download__\r\n\r\nDownload remote database to local `tmp/`\r\n\r\n__local:restore__\r\n\r\nRestores local database from temp file\r\n\r\n__local:localize__\r\n\r\nDump remote database and download it locally  \r\nruns `remote:dump` then `local:download`\r\n\r\n__local:sync__\r\n\r\nDump remote database, download it locally and restore local database.  \r\nruns `local:localize` then `local:restore`\r\n\r\n__remote:dump__\r\n\r\nDump remote database\r\n\r\n__remote:upload__\r\n\r\nUploads local sql.gz file to remote server\r\n\r\n__remote:restore__\r\n\r\nRestore remote database\r\n\r\n__remote:sync__\r\n\r\nUploads and restores remote database.  \r\nruns `remote:upload` then `remote:restore`\r\n\r\n### pry\r\n\r\n__console__\r\n\r\nOpens an interactive rails console with the remote server using `pry` (`pry` must be installed in your rails application or `irb` will be used)\r\n\r\n### rails_config\r\n\r\n*[automatic]* Symlinks rails_config config files from `shared` to `current`\r\n\r\n### rbenv\r\n\r\n__variables__\r\n`ruby_version`: ruby version to install - default 1.9.3-p125  \r\n`rbenv_bootstrap`: which ubuntu version gist to use - default: bootstrap-ubuntu-12-04\r\n\r\n__install__\r\n\r\nInstalls `rbenv` and the `bundler` gem\r\n\r\n\r\n### resque\r\n\r\n> *requires Rakefile tasks moved into project*\r\n\r\n*[automatic]* controls `stop`, `start` and `restart`\r\n\r\n### unicorn\r\n\r\n__variables__\r\n\r\n`unicorn_pid`: path to your unicorn pid file - default: `#{current_path}/tmp/pids/unicorn.pid`  \r\n`unicorn_config`: path to your unicorn config file - default: `\"#{shared_path}/config/unicorn.rb\"`  \r\n`unicorn_log` - default: `#{shared_path}/log/unicorn.log`  \r\n`unicorn_workers`: number of child processes unicorn should spawn - default 1\r\n\r\n__setup__\r\n\r\ncreates unicorn config file and moves it into `shared/config/unicorn.rb`  \r\ncreates unicorn `init.d` control script  \r\nadds control script as startup script (update-rc.d)\r\n\r\n__tail__\r\n\r\ntails remote server `current/log/unicorn.log` file\r\n\r\n__controls__\r\n\r\n*[automatic]* `start`, `stop` and `restart`\r\n\r\n\r\n# Other Info\r\n\r\n## First deploy\r\n__cap deploy:install__  \r\nIf you have a new Linux instance you can run this to hook into the install tasks in each of the recipes to install important packages and config files into your system\r\n> note: make sure you read the recipe files that you have loaded in `deploy.rb` because you may need to set config variables like username and path name information\r\n\r\n__cap deploy:setup__  \r\nThis sets up your directory structure for capistrano in whatever you added to\r\n`set :deploy_to, \"/apps/#{application}\"`\r\nin your deploy.rb file\r\n\r\n__cap deploy:cold__  \r\nThis is run on your first deployment or if your application is not running.\r\nIt runs `deploy:start` on completion instead of `deploy:restart`\r\n\r\n__cap deploy__  \r\nThis is what will be run on each subsequent deployment\r\n\r\n## Order of tasks for `cap deploy:cold`\r\n> note: `deploy:create_symlink` in versions < 2.10 was called `deploy:symlink`\r\n\r\n* `deploy:update`\r\n  * `deploy:updated_code`\r\n    * `deploy:finialize_update`\r\n  * `deploy:create_symlink`\r\n* `deploy:migrate`\r\n* `deploy:start # empty task, user defined`\r\n\r\n## Order of tasks for `cap deploy`\r\n\r\n* `deploy:update`\r\n  * `deploy:update_code`\r\n    * `deploy:finalize_update`\r\n  * `deploy:create_symlink`\r\n* `deploy:restart # empty task, user defined`\r\n\r\n> This [article](https://makandracards.com/makandra/1176-which-capistrano-hooks-to-use-for-events-to-happen-on-both-cap-deploy-and-cap-deploy-migrations) is also helpful about task order\r\n\r\n## Directory Structure after running `cap deploy:setup`\r\n> note: this section is taken almost word for word from [RailsCasts #133](http://railscasts.com/episodes/133-capistrano-tasks)\r\n\r\n```\r\nmyapp/releases\r\nmyapp/current -> releases/20081019001122\r\nmyapp/shared\r\n```\r\n\r\n## Other Resources\r\n\r\n* [List of all Capistrano default tasks](https://github.com/capistrano/capistrano/wiki/Capistrano-Tasks)\r\n* [List of Capistrano variables](https://github.com/capistrano/capistrano/wiki/2.x-Significant-Configuration-Variables)\r\n\r\n## Copyright\r\nCopyright Â© 2012-2013 Square Bracket eU, Aaron Cruz. See LICENSE.txt for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}